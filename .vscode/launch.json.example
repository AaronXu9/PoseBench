{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Current File",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": []
        },
        {
            "name": "diffdock_inference.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/models/diffdock_inference.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "cuda_device_index=0",
                "dataset=posebusters_benchmark",
                // "input_csv_path=forks/DiffDock/inference/diffdock_${dataset}_inputs.csv",
                // "input_data_dir=forks/DiffDock/inference/diffdock_${dataset}_inputs",
                // "output_dir=forks/DiffDock/inference/diffdock_${dataset}_output",
                // "inference_steps=20",
                // "samples_per_complex=40",
                // "batch_size=1",
                // "actual_steps=19",
                // "no_final_step_noise=true",
                "repeat_index=1",
                "skip_existing=true",
            ]
        },
        {
            "name": "fabind_inference.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/models/fabind_inference.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "cuda_device_index=0",
                "dataset=posebusters_benchmark",
                // "input_csv_path=forks/FABind/inference/fabind_${dataset}_inputs.csv",
                // "input_data_dir=forks/FABind/inference/fabind_${dataset}_inputs",
                // "num_threads=1",
                // "skip_existing=false",
                // "save_pt_dir=forks/FABind/inference/fabind_${dataset}_temp_files",
                // "save_mols_dir=forks/FABind/inference/fabind_${dataset}_temp_files/mol",
                // "output_dir=forks/FABind/inference/fabind_${dataset}_output",
            ]
        },
        {
            "name": "dynamicbind_inference.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/models/dynamicbind_inference.py",
            "console": "integratedTerminal",
            "justMyCode": false,
            "args": [
                "cuda_device_index=0",
                "dataset=posebusters_benchmark",
                // "input_data_dir=forks/DynamicBind/inference/dynamicbind_${dataset}_inputs",
                // "input_ligand_csv_dir=forks/DynamicBind/inference/dynamicbind_${dataset}_inputs",
                // "samples_per_complex=40",
                // "savings_per_complex=1",
                // "inference_steps=20",
                // "batch_size=5",
                // "header=posebusters_benchmark_debugging",
                // "num_workers=1",
                "repeat_index=1",
                "skip_existing=true",
            ]
        },
        {
            "name": "rfaa_inference.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/models/rfaa_inference.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "dataset=posebusters_benchmark",
                "max_cycles=10",
                "run_inference_directly=true",
                // "inference_config_name=T1152_rfaa_inference.yaml",
                // "inference_dir_name=T1152_for_debugging"
            ]
        },
        {
            "name": "vina_inference.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/models/vina_inference.py",
            "console": "integratedTerminal",
            "justMyCode": false,
            "args": [
                "dataset=posebusters_benchmark",
                "method=diffdock",
                "repeat_index=1",
                "skip_existing=true",
                // "pocket_only_baseline=true",
            ]
        },
        {
            "name": "minimize_energy.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/models/minimize_energy.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "protein_file=data/test_cases/5S8I_2LY/5S8I_2LY_protein.pdb",
                "ligand_file=data/test_cases/5S8I_2LY/75S8I_2LY_prediction.sdf",
                "output_file=5S8I_2LY_prediction_minimized.sdf",
                // "temp_dir=.",
                // "add_solvent=true",
                // "name=5S8I_2LY",
                // "prep_only=true",
                // "platform=CUDA",
                // "log_level=WARNING",
            ]
        },
        {
            "name": "inference_relaxation.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/models/inference_relaxation.py",
            "console": "integratedTerminal",
            "justMyCode": false,
            "args": [
                "method=neuralplexer",
                // "vina_binding_site_method=diffdock",
                "dataset=posebusters_benchmark",
                "remove_initial_protein_hydrogens=true",
                "assign_partial_charges_manually=true",
                "num_processes=1",
                // "temp_dir=.",
                // "add_solvent=true",
                // "name=null",
                // "prep_only=true",
                // "platform=CUDA",
                "cuda_device_index=0",
                // "log_level=INFO",
                // "protein_dir=null",
                // "ligand_dir=null",
                // "output_dir=null",
                // "relax_protein=true",
                "cache_files=false",
                "repeat_index=1",
                "skip_existing=true",
                // "pocket_only_baseline=true",
            ]
        },
        {
            "name": "complex_alignment.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/analysis/complex_alignment.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "method=neuralplexer",
                "dataset=posebusters_benchmark",
                // "rank_to_align=1",
                // "aligned_filename_postfix='_aligned'",
                // "force_process=false",
                "repeat_index=1",
                // "pocket_only_baseline=true",
            ]
        },
        {
            "name": "ensemble_generation.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/models/ensemble_generation.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "ensemble_methods=[diffdock, dynamicbind, neuralplexer, rfaa, vina]",
                // "vina_binding_site_methods=[diffdock]",
                // "generate_vina_scripts=false",
                // "rank_single_method_intrinsically=false",
                // "input_dir=forks/NeuralPLexer/inference/neuralplexer_posebusters_benchmark_outputs_1",
                "input_csv_filepath=data/test_cases/posebusters_benchmark/ensemble_inputs.csv",
                "output_dir=data/test_cases/posebusters_benchmark/top_consensus_ensemble_predictions_1",
                "skip_existing=true",
                // "relax_method_ligands_pre_ranking=false",
                "relax_method_ligands_post_ranking=false",
                // "relax_remove_initial_protein_hydrogens=false",
                // "relax_model_ions=true",
                // "relax_assign_partial_charges_manually=false",
                "export_file_format=null",
                "export_top_n=1",
                // "casp_author='001'",
                // "casp_method='Ligand_Predictor'",
                // "combine_casp_output_files=true",
                // "cuda_device_index=0",
                "max_method_predictions=40",
                "method_top_n_to_select=40",
                "resume=true",
                "ensemble_benchmarking=true",
                "ensemble_benchmarking_dataset=posebusters_benchmark",
                "ensemble_ranking_method=consensus",
                "ensemble_benchmarking_repeat_index=1",
                // "pocket_only_baseline=true",
            ]
        },
        {
            "name": "inference_analysis.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/analysis/inference_analysis.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "method=fabind",
                // "vina_binding_site_method=diffdock",
                "dataset=posebusters_benchmark",
                // "full_report=false",
                // "ensemble_ranking_method=consensus",
                // "input_csv_path=forks/FABind/inference/fabind_${dataset}_inputs.csv",
                // "input_data_dir=forks/FABind/inference/fabind_${dataset}_inputs",
                // "output_dir=forks/FABind/inference/fabind_${dataset}_output",
                "repeat_index=1",
            ]
        },
        {
            "name": "inference_analysis_casp.py",
            "type": "debugpy",
            "request": "launch",
            "program": "src/analysis/inference_analysis_casp.py",
            "console": "integratedTerminal",
            "justMyCode": false,
            "args": [
                "method=neuralplexer",
                // "vina_binding_site_method=diffdock",
                "dataset=casp15",
                // "ensemble_ranking_method=consensus",
                // "targets=[T1181]",
                // "fault_tolerant=false",
                // "skip_existing=false",
                // "score_relaxed_structures=true",
                "repeat_index=1",
            ]
        },
    ]
}
